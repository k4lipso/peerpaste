// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommonHeaderImpl();
void InitDefaultsCommonHeader();
inline void InitDefaults() {
  InitDefaultsCommonHeader();
}
}  // namespace protobuf_messages_2eproto
class CommonHeader;
class CommonHeaderDefaultTypeInternal;
extern CommonHeaderDefaultTypeInternal _CommonHeader_default_instance_;

// ===================================================================

class CommonHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommonHeader) */ {
 public:
  CommonHeader();
  virtual ~CommonHeader();

  CommonHeader(const CommonHeader& from);

  inline CommonHeader& operator=(const CommonHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonHeader(CommonHeader&& from) noexcept
    : CommonHeader() {
    *this = ::std::move(from);
  }

  inline CommonHeader& operator=(CommonHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonHeader* internal_default_instance() {
    return reinterpret_cast<const CommonHeader*>(
               &_CommonHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonHeader* other);
  friend void swap(CommonHeader& a, CommonHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonHeader& from);
  void MergeFrom(const CommonHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_type = 4;
  bool has_request_type() const;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 4;
  const ::std::string& request_type() const;
  void set_request_type(const ::std::string& value);
  #if LANG_CXX11
  void set_request_type(::std::string&& value);
  #endif
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  ::std::string* mutable_request_type();
  ::std::string* release_request_type();
  void set_allocated_request_type(::std::string* request_type);

  // required string transaction_id = 5;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 5;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction_id(::std::string&& value);
  #endif
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // required string version = 6;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string response_code = 7;
  bool has_response_code() const;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 7;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const char* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // required bool t_flag = 1;
  bool has_t_flag() const;
  void clear_t_flag();
  static const int kTFlagFieldNumber = 1;
  bool t_flag() const;
  void set_t_flag(bool value);

  // required uint32 ttl = 2;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 2;
  ::google::protobuf::uint32 ttl() const;
  void set_ttl(::google::protobuf::uint32 value);

  // required uint64 message_length = 3;
  bool has_message_length() const;
  void clear_message_length();
  static const int kMessageLengthFieldNumber = 3;
  ::google::protobuf::uint64 message_length() const;
  void set_message_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CommonHeader)
 private:
  void set_has_t_flag();
  void clear_has_t_flag();
  void set_has_ttl();
  void clear_has_ttl();
  void set_has_message_length();
  void clear_has_message_length();
  void set_has_request_type();
  void clear_has_request_type();
  void set_has_transaction_id();
  void clear_has_transaction_id();
  void set_has_version();
  void clear_has_version();
  void set_has_response_code();
  void clear_has_response_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_type_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  bool t_flag_;
  ::google::protobuf::uint32 ttl_;
  ::google::protobuf::uint64 message_length_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsCommonHeaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonHeader

// required bool t_flag = 1;
inline bool CommonHeader::has_t_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonHeader::set_has_t_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonHeader::clear_has_t_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonHeader::clear_t_flag() {
  t_flag_ = false;
  clear_has_t_flag();
}
inline bool CommonHeader::t_flag() const {
  // @@protoc_insertion_point(field_get:CommonHeader.t_flag)
  return t_flag_;
}
inline void CommonHeader::set_t_flag(bool value) {
  set_has_t_flag();
  t_flag_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.t_flag)
}

// required uint32 ttl = 2;
inline bool CommonHeader::has_ttl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonHeader::set_has_ttl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonHeader::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonHeader::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 CommonHeader::ttl() const {
  // @@protoc_insertion_point(field_get:CommonHeader.ttl)
  return ttl_;
}
inline void CommonHeader::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.ttl)
}

// required uint64 message_length = 3;
inline bool CommonHeader::has_message_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonHeader::set_has_message_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonHeader::clear_has_message_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonHeader::clear_message_length() {
  message_length_ = GOOGLE_ULONGLONG(0);
  clear_has_message_length();
}
inline ::google::protobuf::uint64 CommonHeader::message_length() const {
  // @@protoc_insertion_point(field_get:CommonHeader.message_length)
  return message_length_;
}
inline void CommonHeader::set_message_length(::google::protobuf::uint64 value) {
  set_has_message_length();
  message_length_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.message_length)
}

// required string request_type = 4;
inline bool CommonHeader::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonHeader::set_has_request_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonHeader::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonHeader::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_type();
}
inline const ::std::string& CommonHeader::request_type() const {
  // @@protoc_insertion_point(field_get:CommonHeader.request_type)
  return request_type_.GetNoArena();
}
inline void CommonHeader::set_request_type(const ::std::string& value) {
  set_has_request_type();
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.request_type)
}
#if LANG_CXX11
inline void CommonHeader::set_request_type(::std::string&& value) {
  set_has_request_type();
  request_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.request_type)
}
#endif
inline void CommonHeader::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_type();
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.request_type)
}
inline void CommonHeader::set_request_type(const char* value, size_t size) {
  set_has_request_type();
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.request_type)
}
inline ::std::string* CommonHeader::mutable_request_type() {
  set_has_request_type();
  // @@protoc_insertion_point(field_mutable:CommonHeader.request_type)
  return request_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_request_type() {
  // @@protoc_insertion_point(field_release:CommonHeader.request_type)
  clear_has_request_type();
  return request_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_request_type(::std::string* request_type) {
  if (request_type != NULL) {
    set_has_request_type();
  } else {
    clear_has_request_type();
  }
  request_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.request_type)
}

// required string transaction_id = 5;
inline bool CommonHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonHeader::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonHeader::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonHeader::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
inline const ::std::string& CommonHeader::transaction_id() const {
  // @@protoc_insertion_point(field_get:CommonHeader.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void CommonHeader::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.transaction_id)
}
#if LANG_CXX11
inline void CommonHeader::set_transaction_id(::std::string&& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.transaction_id)
}
#endif
inline void CommonHeader::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.transaction_id)
}
inline void CommonHeader::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.transaction_id)
}
inline ::std::string* CommonHeader::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:CommonHeader.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_transaction_id() {
  // @@protoc_insertion_point(field_release:CommonHeader.transaction_id)
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.transaction_id)
}

// required string version = 6;
inline bool CommonHeader::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonHeader::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& CommonHeader::version() const {
  // @@protoc_insertion_point(field_get:CommonHeader.version)
  return version_.GetNoArena();
}
inline void CommonHeader::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.version)
}
#if LANG_CXX11
inline void CommonHeader::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.version)
}
#endif
inline void CommonHeader::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.version)
}
inline void CommonHeader::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.version)
}
inline ::std::string* CommonHeader::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:CommonHeader.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_version() {
  // @@protoc_insertion_point(field_release:CommonHeader.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.version)
}

// optional string response_code = 7;
inline bool CommonHeader::has_response_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonHeader::set_has_response_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonHeader::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonHeader::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response_code();
}
inline const ::std::string& CommonHeader::response_code() const {
  // @@protoc_insertion_point(field_get:CommonHeader.response_code)
  return response_code_.GetNoArena();
}
inline void CommonHeader::set_response_code(const ::std::string& value) {
  set_has_response_code();
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.response_code)
}
#if LANG_CXX11
inline void CommonHeader::set_response_code(::std::string&& value) {
  set_has_response_code();
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.response_code)
}
#endif
inline void CommonHeader::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response_code();
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.response_code)
}
inline void CommonHeader::set_response_code(const char* value, size_t size) {
  set_has_response_code();
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.response_code)
}
inline ::std::string* CommonHeader::mutable_response_code() {
  set_has_response_code();
  // @@protoc_insertion_point(field_mutable:CommonHeader.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_response_code() {
  // @@protoc_insertion_point(field_release:CommonHeader.response_code)
  clear_has_response_code();
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    set_has_response_code();
  } else {
    clear_has_response_code();
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.response_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
