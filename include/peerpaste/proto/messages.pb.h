// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_INCLUDED_messages_2eproto
#define PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2eproto();
class CommonHeader;
class CommonHeaderDefaultTypeInternal;
extern CommonHeaderDefaultTypeInternal _CommonHeader_default_instance_;
class FileChunk;
class FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
namespace google {
namespace protobuf {
template<> ::CommonHeader* Arena::CreateMaybeMessage<::CommonHeader>(Arena*);
template<> ::FileChunk* Arena::CreateMaybeMessage<::FileChunk>(Arena*);
template<> ::PeerInfo* Arena::CreateMaybeMessage<::PeerInfo>(Arena*);
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PeerInfo peerinfo = 2;
  int peerinfo_size() const;
  void clear_peerinfo();
  static const int kPeerinfoFieldNumber = 2;
  ::PeerInfo* mutable_peerinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::PeerInfo >*
      mutable_peerinfo();
  const ::PeerInfo& peerinfo(int index) const;
  ::PeerInfo* add_peerinfo();
  const ::google::protobuf::RepeatedPtrField< ::PeerInfo >&
      peerinfo() const;

  // optional string data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .CommonHeader commonheader = 1;
  bool has_commonheader() const;
  void clear_commonheader();
  static const int kCommonheaderFieldNumber = 1;
  const ::CommonHeader& commonheader() const;
  ::CommonHeader* release_commonheader();
  ::CommonHeader* mutable_commonheader();
  void set_allocated_commonheader(::CommonHeader* commonheader);

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PeerInfo > peerinfo_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::CommonHeader* commonheader_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CommonHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommonHeader) */ {
 public:
  CommonHeader();
  virtual ~CommonHeader();

  CommonHeader(const CommonHeader& from);

  inline CommonHeader& operator=(const CommonHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonHeader(CommonHeader&& from) noexcept
    : CommonHeader() {
    *this = ::std::move(from);
  }

  inline CommonHeader& operator=(CommonHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommonHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonHeader* internal_default_instance() {
    return reinterpret_cast<const CommonHeader*>(
               &_CommonHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CommonHeader* other);
  friend void swap(CommonHeader& a, CommonHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonHeader* New() const final {
    return CreateMaybeMessage<CommonHeader>(nullptr);
  }

  CommonHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonHeader& from);
  void MergeFrom(const CommonHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_type = 4;
  bool has_request_type() const;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 4;
  const ::std::string& request_type() const;
  void set_request_type(const ::std::string& value);
  #if LANG_CXX11
  void set_request_type(::std::string&& value);
  #endif
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  ::std::string* mutable_request_type();
  ::std::string* release_request_type();
  void set_allocated_request_type(::std::string* request_type);

  // required string transaction_id = 5;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 5;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction_id(::std::string&& value);
  #endif
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // required string correlational_id = 6;
  bool has_correlational_id() const;
  void clear_correlational_id();
  static const int kCorrelationalIdFieldNumber = 6;
  const ::std::string& correlational_id() const;
  void set_correlational_id(const ::std::string& value);
  #if LANG_CXX11
  void set_correlational_id(::std::string&& value);
  #endif
  void set_correlational_id(const char* value);
  void set_correlational_id(const char* value, size_t size);
  ::std::string* mutable_correlational_id();
  ::std::string* release_correlational_id();
  void set_allocated_correlational_id(::std::string* correlational_id);

  // required string version = 7;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string response_code = 8;
  bool has_response_code() const;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 8;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const char* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // required bool t_flag = 1;
  bool has_t_flag() const;
  void clear_t_flag();
  static const int kTFlagFieldNumber = 1;
  bool t_flag() const;
  void set_t_flag(bool value);

  // required uint32 ttl = 2;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 2;
  ::google::protobuf::uint32 ttl() const;
  void set_ttl(::google::protobuf::uint32 value);

  // required uint64 message_length = 3;
  bool has_message_length() const;
  void clear_message_length();
  static const int kMessageLengthFieldNumber = 3;
  ::google::protobuf::uint64 message_length() const;
  void set_message_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CommonHeader)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_type_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::internal::ArenaStringPtr correlational_id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  bool t_flag_;
  ::google::protobuf::uint32 ttl_;
  ::google::protobuf::uint64 message_length_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PeerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PeerInfo* other);
  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(nullptr);
  }

  PeerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peer_id = 1;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required string peer_ip = 2;
  bool has_peer_ip() const;
  void clear_peer_ip();
  static const int kPeerIpFieldNumber = 2;
  const ::std::string& peer_ip() const;
  void set_peer_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_ip(::std::string&& value);
  #endif
  void set_peer_ip(const char* value);
  void set_peer_ip(const char* value, size_t size);
  ::std::string* mutable_peer_ip();
  ::std::string* release_peer_ip();
  void set_allocated_peer_ip(::std::string* peer_ip);

  // required string peer_port = 3;
  bool has_peer_port() const;
  void clear_peer_port();
  static const int kPeerPortFieldNumber = 3;
  const ::std::string& peer_port() const;
  void set_peer_port(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_port(::std::string&& value);
  #endif
  void set_peer_port(const char* value);
  void set_peer_port(const char* value, size_t size);
  ::std::string* mutable_peer_port();
  ::std::string* release_peer_port();
  void set_allocated_peer_port(::std::string* peer_port);

  // optional string peer_rtt = 4;
  bool has_peer_rtt() const;
  void clear_peer_rtt();
  static const int kPeerRttFieldNumber = 4;
  const ::std::string& peer_rtt() const;
  void set_peer_rtt(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_rtt(::std::string&& value);
  #endif
  void set_peer_rtt(const char* value);
  void set_peer_rtt(const char* value, size_t size);
  ::std::string* mutable_peer_rtt();
  ::std::string* release_peer_rtt();
  void set_allocated_peer_rtt(::std::string* peer_rtt);

  // optional string peer_uptime = 5;
  bool has_peer_uptime() const;
  void clear_peer_uptime();
  static const int kPeerUptimeFieldNumber = 5;
  const ::std::string& peer_uptime() const;
  void set_peer_uptime(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_uptime(::std::string&& value);
  #endif
  void set_peer_uptime(const char* value);
  void set_peer_uptime(const char* value, size_t size);
  ::std::string* mutable_peer_uptime();
  ::std::string* release_peer_uptime();
  void set_allocated_peer_uptime(::std::string* peer_uptime);

  // @@protoc_insertion_point(class_scope:PeerInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_ip_;
  ::google::protobuf::internal::ArenaStringPtr peer_port_;
  ::google::protobuf::internal::ArenaStringPtr peer_rtt_;
  ::google::protobuf::internal::ArenaStringPtr peer_uptime_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class FileChunk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileChunk) */ {
 public:
  FileChunk();
  virtual ~FileChunk();

  FileChunk(const FileChunk& from);

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileChunk* other);
  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileChunk* New() const final {
    return CreateMaybeMessage<FileChunk>(nullptr);
  }

  FileChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileChunk& from);
  void MergeFrom(const FileChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int64 offset = 1;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FileChunk)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 offset_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required .CommonHeader commonheader = 1;
inline bool Request::has_commonheader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_commonheader() {
  if (commonheader_ != nullptr) commonheader_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonHeader& Request::commonheader() const {
  const ::CommonHeader* p = commonheader_;
  // @@protoc_insertion_point(field_get:Request.commonheader)
  return p != nullptr ? *p : *reinterpret_cast<const ::CommonHeader*>(
      &::_CommonHeader_default_instance_);
}
inline ::CommonHeader* Request::release_commonheader() {
  // @@protoc_insertion_point(field_release:Request.commonheader)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonHeader* temp = commonheader_;
  commonheader_ = nullptr;
  return temp;
}
inline ::CommonHeader* Request::mutable_commonheader() {
  _has_bits_[0] |= 0x00000002u;
  if (commonheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonHeader>(GetArenaNoVirtual());
    commonheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Request.commonheader)
  return commonheader_;
}
inline void Request::set_allocated_commonheader(::CommonHeader* commonheader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commonheader_;
  }
  if (commonheader) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commonheader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commonheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commonheader_ = commonheader;
  // @@protoc_insertion_point(field_set_allocated:Request.commonheader)
}

// repeated .PeerInfo peerinfo = 2;
inline int Request::peerinfo_size() const {
  return peerinfo_.size();
}
inline void Request::clear_peerinfo() {
  peerinfo_.Clear();
}
inline ::PeerInfo* Request::mutable_peerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Request.peerinfo)
  return peerinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PeerInfo >*
Request::mutable_peerinfo() {
  // @@protoc_insertion_point(field_mutable_list:Request.peerinfo)
  return &peerinfo_;
}
inline const ::PeerInfo& Request::peerinfo(int index) const {
  // @@protoc_insertion_point(field_get:Request.peerinfo)
  return peerinfo_.Get(index);
}
inline ::PeerInfo* Request::add_peerinfo() {
  // @@protoc_insertion_point(field_add:Request.peerinfo)
  return peerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PeerInfo >&
Request::peerinfo() const {
  // @@protoc_insertion_point(field_list:Request.peerinfo)
  return peerinfo_;
}

// optional string data = 3;
inline bool Request::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:Request.data)
  return data_.GetNoArena();
}
inline void Request::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.data)
}
#if LANG_CXX11
inline void Request::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.data)
}
#endif
inline void Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.data)
}
inline void Request::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.data)
}
inline ::std::string* Request::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:Request.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Request.data)
}

// -------------------------------------------------------------------

// CommonHeader

// required bool t_flag = 1;
inline bool CommonHeader::has_t_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonHeader::clear_t_flag() {
  t_flag_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommonHeader::t_flag() const {
  // @@protoc_insertion_point(field_get:CommonHeader.t_flag)
  return t_flag_;
}
inline void CommonHeader::set_t_flag(bool value) {
  _has_bits_[0] |= 0x00000020u;
  t_flag_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.t_flag)
}

// required uint32 ttl = 2;
inline bool CommonHeader::has_ttl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonHeader::clear_ttl() {
  ttl_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CommonHeader::ttl() const {
  // @@protoc_insertion_point(field_get:CommonHeader.ttl)
  return ttl_;
}
inline void CommonHeader::set_ttl(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ttl_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.ttl)
}

// required uint64 message_length = 3;
inline bool CommonHeader::has_message_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonHeader::clear_message_length() {
  message_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CommonHeader::message_length() const {
  // @@protoc_insertion_point(field_get:CommonHeader.message_length)
  return message_length_;
}
inline void CommonHeader::set_message_length(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  message_length_ = value;
  // @@protoc_insertion_point(field_set:CommonHeader.message_length)
}

// required string request_type = 4;
inline bool CommonHeader::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonHeader::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CommonHeader::request_type() const {
  // @@protoc_insertion_point(field_get:CommonHeader.request_type)
  return request_type_.GetNoArena();
}
inline void CommonHeader::set_request_type(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.request_type)
}
#if LANG_CXX11
inline void CommonHeader::set_request_type(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.request_type)
}
#endif
inline void CommonHeader::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.request_type)
}
inline void CommonHeader::set_request_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.request_type)
}
inline ::std::string* CommonHeader::mutable_request_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CommonHeader.request_type)
  return request_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_request_type() {
  // @@protoc_insertion_point(field_release:CommonHeader.request_type)
  if (!has_request_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_request_type(::std::string* request_type) {
  if (request_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.request_type)
}

// required string transaction_id = 5;
inline bool CommonHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonHeader::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CommonHeader::transaction_id() const {
  // @@protoc_insertion_point(field_get:CommonHeader.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void CommonHeader::set_transaction_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.transaction_id)
}
#if LANG_CXX11
inline void CommonHeader::set_transaction_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.transaction_id)
}
#endif
inline void CommonHeader::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.transaction_id)
}
inline void CommonHeader::set_transaction_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.transaction_id)
}
inline ::std::string* CommonHeader::mutable_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:CommonHeader.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_transaction_id() {
  // @@protoc_insertion_point(field_release:CommonHeader.transaction_id)
  if (!has_transaction_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return transaction_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.transaction_id)
}

// required string correlational_id = 6;
inline bool CommonHeader::has_correlational_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonHeader::clear_correlational_id() {
  correlational_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CommonHeader::correlational_id() const {
  // @@protoc_insertion_point(field_get:CommonHeader.correlational_id)
  return correlational_id_.GetNoArena();
}
inline void CommonHeader::set_correlational_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  correlational_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.correlational_id)
}
#if LANG_CXX11
inline void CommonHeader::set_correlational_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  correlational_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.correlational_id)
}
#endif
inline void CommonHeader::set_correlational_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  correlational_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.correlational_id)
}
inline void CommonHeader::set_correlational_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  correlational_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.correlational_id)
}
inline ::std::string* CommonHeader::mutable_correlational_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:CommonHeader.correlational_id)
  return correlational_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_correlational_id() {
  // @@protoc_insertion_point(field_release:CommonHeader.correlational_id)
  if (!has_correlational_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return correlational_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_correlational_id(::std::string* correlational_id) {
  if (correlational_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  correlational_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlational_id);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.correlational_id)
}

// required string version = 7;
inline bool CommonHeader::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CommonHeader::version() const {
  // @@protoc_insertion_point(field_get:CommonHeader.version)
  return version_.GetNoArena();
}
inline void CommonHeader::set_version(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.version)
}
#if LANG_CXX11
inline void CommonHeader::set_version(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.version)
}
#endif
inline void CommonHeader::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.version)
}
inline void CommonHeader::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.version)
}
inline ::std::string* CommonHeader::mutable_version() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:CommonHeader.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_version() {
  // @@protoc_insertion_point(field_release:CommonHeader.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.version)
}

// optional string response_code = 8;
inline bool CommonHeader::has_response_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonHeader::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CommonHeader::response_code() const {
  // @@protoc_insertion_point(field_get:CommonHeader.response_code)
  return response_code_.GetNoArena();
}
inline void CommonHeader::set_response_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommonHeader.response_code)
}
#if LANG_CXX11
inline void CommonHeader::set_response_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommonHeader.response_code)
}
#endif
inline void CommonHeader::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommonHeader.response_code)
}
inline void CommonHeader::set_response_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommonHeader.response_code)
}
inline ::std::string* CommonHeader::mutable_response_code() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:CommonHeader.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonHeader::release_response_code() {
  // @@protoc_insertion_point(field_release:CommonHeader.response_code)
  if (!has_response_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return response_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonHeader::set_allocated_response_code(::std::string* response_code) {
  if (response_code != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:CommonHeader.response_code)
}

// -------------------------------------------------------------------

// PeerInfo

// required string peer_id = 1;
inline bool PeerInfo::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerInfo::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PeerInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_id)
  return peer_id_.GetNoArena();
}
inline void PeerInfo::set_peer_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_id)
}
#if LANG_CXX11
inline void PeerInfo::set_peer_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_id)
}
#endif
inline void PeerInfo::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_id)
}
inline void PeerInfo::set_peer_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_id)
}
inline ::std::string* PeerInfo::mutable_peer_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_id)
  if (!has_peer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_id)
}

// required string peer_ip = 2;
inline bool PeerInfo::has_peer_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerInfo::clear_peer_ip() {
  peer_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& PeerInfo::peer_ip() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_ip)
  return peer_ip_.GetNoArena();
}
inline void PeerInfo::set_peer_ip(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_ip)
}
#if LANG_CXX11
inline void PeerInfo::set_peer_ip(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_ip)
}
#endif
inline void PeerInfo::set_peer_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_ip)
}
inline void PeerInfo::set_peer_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_ip)
}
inline ::std::string* PeerInfo::mutable_peer_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_ip)
  return peer_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_peer_ip() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_ip)
  if (!has_peer_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return peer_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peer_ip(::std::string* peer_ip) {
  if (peer_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_ip);
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_ip)
}

// required string peer_port = 3;
inline bool PeerInfo::has_peer_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeerInfo::clear_peer_port() {
  peer_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& PeerInfo::peer_port() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_port)
  return peer_port_.GetNoArena();
}
inline void PeerInfo::set_peer_port(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  peer_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_port)
}
#if LANG_CXX11
inline void PeerInfo::set_peer_port(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  peer_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_port)
}
#endif
inline void PeerInfo::set_peer_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  peer_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_port)
}
inline void PeerInfo::set_peer_port(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  peer_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_port)
}
inline ::std::string* PeerInfo::mutable_peer_port() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_port)
  return peer_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_peer_port() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_port)
  if (!has_peer_port()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return peer_port_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peer_port(::std::string* peer_port) {
  if (peer_port != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  peer_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_port);
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_port)
}

// optional string peer_rtt = 4;
inline bool PeerInfo::has_peer_rtt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PeerInfo::clear_peer_rtt() {
  peer_rtt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& PeerInfo::peer_rtt() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_rtt)
  return peer_rtt_.GetNoArena();
}
inline void PeerInfo::set_peer_rtt(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  peer_rtt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_rtt)
}
#if LANG_CXX11
inline void PeerInfo::set_peer_rtt(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  peer_rtt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_rtt)
}
#endif
inline void PeerInfo::set_peer_rtt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  peer_rtt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_rtt)
}
inline void PeerInfo::set_peer_rtt(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  peer_rtt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_rtt)
}
inline ::std::string* PeerInfo::mutable_peer_rtt() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_rtt)
  return peer_rtt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_peer_rtt() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_rtt)
  if (!has_peer_rtt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return peer_rtt_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peer_rtt(::std::string* peer_rtt) {
  if (peer_rtt != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  peer_rtt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_rtt);
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_rtt)
}

// optional string peer_uptime = 5;
inline bool PeerInfo::has_peer_uptime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PeerInfo::clear_peer_uptime() {
  peer_uptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& PeerInfo::peer_uptime() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_uptime)
  return peer_uptime_.GetNoArena();
}
inline void PeerInfo::set_peer_uptime(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  peer_uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_uptime)
}
#if LANG_CXX11
inline void PeerInfo::set_peer_uptime(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  peer_uptime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_uptime)
}
#endif
inline void PeerInfo::set_peer_uptime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  peer_uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_uptime)
}
inline void PeerInfo::set_peer_uptime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  peer_uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_uptime)
}
inline ::std::string* PeerInfo::mutable_peer_uptime() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_uptime)
  return peer_uptime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_peer_uptime() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_uptime)
  if (!has_peer_uptime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return peer_uptime_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peer_uptime(::std::string* peer_uptime) {
  if (peer_uptime != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  peer_uptime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_uptime);
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_uptime)
}

// -------------------------------------------------------------------

// FileChunk

// optional int64 offset = 1;
inline bool FileChunk::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileChunk::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 FileChunk::offset() const {
  // @@protoc_insertion_point(field_get:FileChunk.offset)
  return offset_;
}
inline void FileChunk::set_offset(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:FileChunk.offset)
}

// optional bytes data = 2;
inline bool FileChunk::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:FileChunk.data)
  return data_.GetNoArena();
}
inline void FileChunk::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileChunk.data)
}
#if LANG_CXX11
inline void FileChunk::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileChunk.data)
}
#endif
inline void FileChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileChunk.data)
}
inline void FileChunk::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileChunk.data)
}
inline ::std::string* FileChunk::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:FileChunk.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FileChunk.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2eproto
